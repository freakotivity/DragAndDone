//
//  FreakoColors.swift
//  Colors for Drag And Done
//
//  Created by Gabriel on 20/02/15.
//  Copyright (c) 2015 Freakotivity. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class FreakoColors : NSObject {

    //// Cache

    private struct Cache {
        static var freakoGreen: UIColor = UIColor(red: 0.057, green: 0.713, blue: 0.250, alpha: 1.000)
        static var freakoDarkBlue: UIColor = UIColor(red: 0.221, green: 0.276, blue: 0.712, alpha: 1.000)
        static var freakoViolet: UIColor = UIColor(red: 0.536, green: 0.236, blue: 0.665, alpha: 1.000)
        static var freakoBlue: UIColor = UIColor(red: 0.147, green: 0.511, blue: 0.842, alpha: 1.000)
        static var freakoOrange: UIColor = UIColor(red: 0.937, green: 0.426, blue: 0.000, alpha: 1.000)
        static var freakoRed: UIColor = UIColor(red: 0.902, green: 0.115, blue: 0.032, alpha: 1.000)
        static var freakoYellow: UIColor = UIColor(red: 0.934, green: 0.848, blue: 0.000, alpha: 1.000)
        static var freakoLighterGreen: UIColor = FreakoColors.freakoGreen.colorWithHighlight(0.2)
        static var freakoDarkerGreen: UIColor = FreakoColors.freakoGreen.colorWithShadow(0.2)
        static var freakoLighterDarkBlue: UIColor = FreakoColors.freakoDarkBlue.colorWithHighlight(0.2)
        static var freakoLighterViolet: UIColor = FreakoColors.freakoViolet.colorWithHighlight(0.2)
        static var freakoLighterBlue: UIColor = FreakoColors.freakoBlue.colorWithHighlight(0.2)
        static var freakoLighterOrange: UIColor = FreakoColors.freakoOrange.colorWithHighlight(0.2)
        static var freakoLighterRed: UIColor = FreakoColors.freakoRed.colorWithHighlight(0.2)
        static var freakoLighterYellow: UIColor = FreakoColors.freakoYellow.colorWithHighlight(0.2)
        static var freakoDarkerDarkBlue: UIColor = FreakoColors.freakoDarkBlue.colorWithShadow(0.2)
        static var freakoDarkerViolet: UIColor = FreakoColors.freakoViolet.colorWithShadow(0.2)
        static var freakoDarkerBlue: UIColor = FreakoColors.freakoBlue.colorWithShadow(0.2)
        static var freakoDarkerRed: UIColor = FreakoColors.freakoRed.colorWithShadow(0.2)
        static var freakoDarkerYellow: UIColor = FreakoColors.freakoYellow.colorWithShadow(0.2)
        static var freakoDarkerOrange: UIColor = FreakoColors.freakoOrange.colorWithShadow(0.2)
    }

    //// Colors

    public class var freakoGreen: UIColor { return Cache.freakoGreen }
    public class var freakoDarkBlue: UIColor { return Cache.freakoDarkBlue }
    public class var freakoViolet: UIColor { return Cache.freakoViolet }
    public class var freakoBlue: UIColor { return Cache.freakoBlue }
    public class var freakoOrange: UIColor { return Cache.freakoOrange }
    public class var freakoRed: UIColor { return Cache.freakoRed }
    public class var freakoYellow: UIColor { return Cache.freakoYellow }
    public class var freakoLighterGreen: UIColor { return Cache.freakoLighterGreen }
    public class var freakoDarkerGreen: UIColor { return Cache.freakoDarkerGreen }
    public class var freakoLighterDarkBlue: UIColor { return Cache.freakoLighterDarkBlue }
    public class var freakoLighterViolet: UIColor { return Cache.freakoLighterViolet }
    public class var freakoLighterBlue: UIColor { return Cache.freakoLighterBlue }
    public class var freakoLighterOrange: UIColor { return Cache.freakoLighterOrange }
    public class var freakoLighterRed: UIColor { return Cache.freakoLighterRed }
    public class var freakoLighterYellow: UIColor { return Cache.freakoLighterYellow }
    public class var freakoDarkerDarkBlue: UIColor { return Cache.freakoDarkerDarkBlue }
    public class var freakoDarkerViolet: UIColor { return Cache.freakoDarkerViolet }
    public class var freakoDarkerBlue: UIColor { return Cache.freakoDarkerBlue }
    public class var freakoDarkerRed: UIColor { return Cache.freakoDarkerRed }
    public class var freakoDarkerYellow: UIColor { return Cache.freakoDarkerYellow }
    public class var freakoDarkerOrange: UIColor { return Cache.freakoDarkerOrange }

    //// Drawing Methods

    public class func drawDarkCyanLimeGreen() {

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(0, 0, 160, 160), cornerRadius: 80)
        FreakoColors.freakoGreen.setFill()
        rectangle2Path.fill()
    }

    public class func drawDarkModerateBlue() {

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(0, 0, 160, 160), cornerRadius: 80)
        FreakoColors.freakoDarkBlue.setFill()
        rectangle2Path.fill()
    }

    public class func drawModerateVieolet() {

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(0, 0, 160, 160), cornerRadius: 80)
        FreakoColors.freakoViolet.setFill()
        rectangle2Path.fill()
    }

    public class func drawStrongBlue() {

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(0, 0, 160, 160), cornerRadius: 80)
        FreakoColors.freakoBlue.setFill()
        rectangle2Path.fill()
    }

    public class func drawVividOrange() {

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(0, 0, 160, 160), cornerRadius: 80)
        FreakoColors.freakoOrange.setFill()
        rectangle2Path.fill()
    }

    public class func drawVividRed() {

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(0, 0, 160, 160), cornerRadius: 80)
        FreakoColors.freakoRed.setFill()
        rectangle2Path.fill()
    }

    public class func drawVividYellow() {

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(0, 0, 160, 160), cornerRadius: 80)
        FreakoColors.freakoYellow.setFill()
        rectangle2Path.fill()
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
